// Generated by CoffeeScript 1.8.0
(function() {
  var DiscoverAnnouncer, DiscoverBrowser, EventEmitter, dgram, interval, port,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("eventemitter2").EventEmitter2;

  dgram = require("dgram");

  port = 59544;

  interval = 100;

  DiscoverAnnouncer = (function() {
    function DiscoverAnnouncer(name, version) {
      this.identifier = [name, version].join("\0");
      this.socket = dgram.createSocket("udp4");
      this.socket.bind(port + 1, (function(_this) {
        return function() {
          _this.socket.setBroadcast(true);
          _this.socket.on("error", function() {});
          return setInterval(function() {
            var message;
            message = new Buffer(_this.identifier);
            return _this.socket.send(message, 0, message.length, port, "255.255.255.255");
          }, interval);
        };
      })(this));
    }

    return DiscoverAnnouncer;

  })();

  DiscoverBrowser = (function(_super) {
    __extends(DiscoverBrowser, _super);

    function DiscoverBrowser(name, version) {
      this.nodes = [];
      this.nodesTimeouts = [];
      this.identifier = [name, version].join("\0");
      this.timeout = (function(_this) {
        return function(address) {
          var pos;
          pos = _this.nodes.indexOf(address);
          if (pos !== -1) {
            _this.nodesTimeouts.splice(pos, 1);
          }
          if (pos !== -1) {
            _this.nodes.splice(pos, 1);
          }
          return _this.emit("nodeDown", address);
        };
      })(this);
      this.socket = dgram.createSocket("udp4");
      this.socket.bind(port);
      this.socket.on("message", (function(_this) {
        return function(message, remote) {
          var pos;
          if (message.toString() === _this.identifier) {
            pos = _this.nodes.indexOf(remote.address);
            if (pos !== -1) {
              clearTimeout(_this.nodesTimeouts[pos]);
              return _this.nodesTimeouts[pos] = setTimeout(_this.timeout, 2 * interval, remote.address);
            } else {
              _this.nodes.push(remote.address);
              _this.nodesTimeouts.push(setTimeout(_this.timeout, 2 * interval, remote.address));
              return _this.emit("nodeUp", remote.address);
            }
          }
        };
      })(this));
    }

    return DiscoverBrowser;

  })(EventEmitter);

  module.exports = {
    createBrowser: function(name, version) {
      if (version == null) {
        version = "latest";
      }
      return new DiscoverBrowser(name, version);
    },
    createAnnouncer: function(name, version) {
      if (version == null) {
        version = "latest";
      }
      return new DiscoverAnnouncer(name, version);
    }
  };

}).call(this);
